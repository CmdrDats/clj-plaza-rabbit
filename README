# clj-plaza-rabbit

A thin wrapper around the RabbitMQ Java library

## Usage

############ Consumers ##############
(use 'clj-plaza-rabbit.core)

;; connection, declaration of channels, and one exchange
(def *rabbit* (connect))
(make-channel *rabbit* :consumera)
(make-channel *rabbit* :consumerb)
(make-channel *rabbit* :publisher)
(declare-exchange *rabbit* :publisher "foo-exchange")

;; Consumer a)
(make-queue *rabbit* :consumera "qa" "foo-exchange" "all")
(make-consumer *rabbit* :consumera "qa" #(println (str "(a) -> got message: " %1)))

;; Consumer b)
(make-queue *rabbit* :consumerb "qb" "foo-exchange" "all")
(make-consumer *rabbit* :consumerb "qb" #(println (str "(b) -> got message: " %1)))

;; publisher
(.start (Thread. #(doseq [i (range 0 100)] (publish *rabbit* :publisher "foo-exchange" "all" (str "hola " i)) (Thread/sleep 1000))))

;; output :
; (a) -> got message: hola 1
; (b) -> got message: hola 1
; (a) -> got message: hola 2
; (b) -> got message: hola 2
; ...

;; closing connection and channels
(disconnect *rabbit*)

############ Reading N messages ##############
(use 'clj-plaza-rabbit.core)

;; connection, declaration of channels, and one exchange
(def *rabbit* (connect))

(make-channel *rabbit* :consumer-n)
(make-channel *rabbit* :publisher)
(declare-exchange *rabbit* :publisher "foo-exchange")
(make-queue *rabbit* :consumer-n "qn" "foo-exchange" "all")

(.start (Thread. #(do (consume-n-messages *rabbit* :consumer-n "qn" 2) (println "got 2 messages!"))))

(publish *rabbit* :publisher "foo-exchange" "all" (str "hola"))
(publish *rabbit* :publisher "foo-exchange" "all" (str "hola"))

;; output:
; got 2 messages!

;; closing connection and channels
(disconnect *rabbit*)

############ Local blocking queue ##############
(use 'clj-plaza-rabbit.core)

;; connection, declaration of channels, and one exchange
(def *rabbit* (connect))

(make-channel *rabbit* :consumer-queue)
(declare-exchange *rabbit* :publisher "foo-exchange")
(make-queue *rabbit* :consumer-queue "bq" "foo-exchange" "all")
(def *q* (make-consumer-queue *rabbit* :consumer-queue "bq"))

(.start (Thread. #(doseq [m *q*] (println (str "Got something: " m)))))

(publish *rabbit* :publisher "foo-exchange" "all" (str "hola"))
;; output:
; Got something: hola

(publish *rabbit* :publisher "foo-exchange" "all" (str "hola"))
;; output:
; Got something: hola


;; closing connection and channels
(disconnect *rabbit*)

## Installation

Clojars:

[clj-plaza-rabbit "1.0.0-SNAPSHOT"]

Maven:

<dependency>
  <groupId>clj-plaza-rabbit</groupId>
  <artifactId>clj-plaza-rabbit</artifactId>
  <version>1.0.0-SNAPSHOT</version>
</dependency>

## License

(MIT/ wadus/ do what you want) license
